import { Sidebar } from "sidebar.slint";
import { StatusBar } from "status_bar.slint";
import { Channel, PendingChannel } from "../views/channels_view.slint";

export component AppLayout inherits Rectangle {
    // Properties
    in property <bool> node-is-running;
    in property <string> node-sync-status;
    in property <bool> wallet-needs-unlock;
    in property <string> status-message;
    in property <bool> has-error;
    in property <bool> litd-started-by-app;
    in property <bool> status-checking;
    in property <[Channel]> channels;
    in property <[PendingChannel]> pending-channels;
    in-out property <int> active-page;
    in property <bool> is-mainnet: false;
    in property <int> wallet-balance: 0;
    // UI navigation callbacks only
    callback home();
    callback wallet-view();
    callback manage-channels();
    callback create-channel();
    callback manage-invoices();
    callback create-custom-invoice();
    callback create-standard-invoice();
    callback toggle-network(network: string);

    background: #202020;
    
    VerticalLayout {
        padding: 0px;
        spacing: 0px;
        
        HorizontalLayout {
            padding: 0px;
            spacing: 0px;
            
            // Sidebar
            Sidebar {
                node-is-running: root.node-is-running;
                node-sync-status: root.node-sync-status;
                wallet-needs-unlock: root.wallet-needs-unlock;
                litd-started-by-app: root.litd-started-by-app;
                status-checking: root.status-checking;
                is-mainnet: root.is-mainnet;
                wallet-balance: root.wallet-balance;
                
                wallet-view => { root.wallet-view(); }
                home => { root.home(); }
                manage-channels => { root.manage-channels(); }
                create-channel => { root.create-channel(); }
                manage-invoices => { root.manage-invoices(); }
                create-custom-invoice => { root.create-custom-invoice(); }
                create-standard-invoice => { root.create-standard-invoice(); }
                toggle-network(network) => { root.toggle-network(network); }
            }
            
            // Main content area
            Rectangle {
                background: #202020;
                @children
            }
        }
        
        // Status bar at bottom
        StatusBar {
            status-message: root.status-message;
            has-error: root.has-error;
        }
    }
} 