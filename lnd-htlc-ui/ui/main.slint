import { Button, LineEdit, ScrollView, VerticalBox } from "std-widgets.slint";

struct Invoice {
    bolt11: string,
    hash: string,
    preimage: string,
    amount: int,
    memo: string,
    state: string,
}

component InvoiceItem inherits Rectangle {
    in property <Invoice> invoice;
    in property <bool> is-settled;
    callback settle-clicked();

    VerticalBox {
        Text {
            text: "BOLT11: " + invoice.bolt11;
            wrap: word-wrap;
        }
        Text { text: "Hash: " + invoice.hash; }
        Text { text: "Amount: " + invoice.amount + " sats"; }
        Text { text: "Memo: " + invoice.memo; }
        Text { text: "State: " + invoice.state; }
        if (!is-settled && invoice.state == "ACCEPTED"): Button {
            text: "Settle with Preimage";
            clicked => { settle-clicked(); }
        }
    }
}

export component MainWindow inherits Window {
    title: "LND HTLC Manager";
    min-width: 600px;
    min-height: 400px;

    callback create-invoice(string, int, string); // preimage, amount, memo
    callback check-invoice(string); // hash
    callback settle-invoice(string, string); // hash, preimage
    
    in property <[Invoice]> invoices: [];
    in property <string> status-message;

    VerticalBox {
        padding: 10px;

        // Create Invoice Section
        GroupBox {
            title: "Create Custom Invoice";
            VerticalBox {
                spacing: 10px;
                HorizontalLayout {
                    spacing: 10px;
                    Text { text: "Amount (sats):"; }
                    amount := LineEdit { placeholder-text: "1000"; }
                }
                HorizontalLayout {
                    spacing: 10px;
                    Text { text: "Memo:"; }
                    memo := LineEdit { placeholder-text: "Enter memo"; }
                }
                Button {
                    text: "Create Invoice";
                    clicked => {
                        create-invoice(preimage.text, amount.text.to-float(), memo.text);
                    }
                }
            }
        }

        // Status Message
        if status-message != "": Rectangle {
            background: status-message.starts-with("Error") ? #ff000022 : #00ff0022;
            Text {
                text: status-message;
                color: status-message.starts-with("Error") ? #aa0000 : #007700;
            }
        }

        // Invoices List
        GroupBox {
            title: "Invoices";
            vertical-stretch: 1;
            ScrollView {
                VerticalBox {
                    spacing: 10px;
                    for invoice in invoices: InvoiceItem {
                        invoice: invoice;
                        is-settled: invoice.state == "SETTLED";
                        settle-clicked => {
                            settle-invoice(invoice.hash, invoice.preimage);
                        }
                    }
                }
            }
        }
    }
} 