import { Button, LineEdit, ScrollView, VerticalBox } from "std-widgets.slint";
import { Invoice, InvoiceItem } from "components/invoice.slint";
import { WalletUnlockDialog } from "components/wallet_dialog.slint";
import { ActionButton } from "components/action_button.slint";
import { AppLayout } from "components/app_layout.slint";
import { ChannelsView } from "views/channels_view.slint";
import { CreateChannelView } from "views/channel_creation_view.slint";
import { PreimageView } from "views/preimage_view.slint";
import { CreateCustomInvoiceView, PayInvoiceView, ClaimInvoiceView, CreateStandardInvoiceView } from "views/invoice_views.slint";

export component MainWindow inherits Window {
    title: "Lightning Network Manager";
    min-width: 900px;
    min-height: 600px;
    
    // Main callbacks
    callback manage-channels();
    callback create-channel();
    callback generate-xh();
    callback create-custom-invoice(string, string, string); // preimage, amount, memo
    callback pay-custom-invoice(string); // bolt11
    callback claim-custom-invoice(string, string); // hash, preimage
    callback create-standard-invoice(string, int); // memo, amount
    callback check-node-status();
    callback start-node();
    callback unlock-wallet(string); // password
    callback close-wallet-dialog();

    // Special callback for updating preimage/hash display
    callback update-preimage-hash(string, string); // preimage, hash
    
    // Action page tracking
    property <int> active-page: 0; // 0 = manage channels, 1 = create channel, 2 = generate x/h, 3 = custom invoice, 4 = pay invoice, 5 = claim invoice, 6 = standard invoice
    
    in property <[Invoice]> invoices: [];
    in property <string> status-message;
    in property <bool> node-is-running: false;
    in property <string> node-sync-status: "Unknown";
    in property <bool> wallet-needs-unlock: false;
    property <bool> has-error: status-message != "" && (status-message == "Error" || status-message == "Error: ");
    
    // Local storage for preimage and hash
    property <string> current-preimage: "";
    property <string> current-hash: "";
    
    // Handle the update callback
    update-preimage-hash(preimage, hash) => {
        root.current-preimage = preimage;
        root.current-hash = hash;
    }

    // Main app layout with sidebar and status bar
    AppLayout {
        node-is-running: root.node-is-running;
        node-sync-status: root.node-sync-status;
        wallet-needs-unlock: root.wallet-needs-unlock;
        status-message: root.status-message;
        has-error: root.has-error;
        active-page <=> root.active-page;
        
        manage-channels => { root.manage-channels(); }
        create-channel => { root.create-channel(); }
        generate-xh => { root.generate-xh(); }
        create-custom-invoice => { root.active-page = 3; }
        pay-invoice => { root.active-page = 4; }
        claim-invoice => { root.active-page = 5; }
        create-standard-invoice => { root.active-page = 6; }
        check-node-status => { root.check-node-status(); }
        start-node => { root.start-node(); }
        unlock-wallet(password) => { root.unlock-wallet(password); }
        
        // Main content area based on active page
        if (active-page == 0): ChannelsView {
        }
        
        if (active-page == 1): CreateChannelView {
        }
        
        if (active-page == 2): PreimageView {
            current-preimage: root.current-preimage;
            current-hash: root.current-hash;
            generate-clicked => { root.generate-xh(); }
        }
        
        if (active-page == 3): CreateCustomInvoiceView {
            create-clicked(preimage, amount, memo) => {
                root.create-custom-invoice(preimage, amount, memo);
            }
        }
        
        if (active-page == 4): PayInvoiceView {
            pay-clicked(bolt11) => {
                root.pay-custom-invoice(bolt11);
            }
        }
        
        if (active-page == 5): ClaimInvoiceView {
            claim-clicked(hash, preimage) => {
                root.claim-custom-invoice(hash, preimage);
            }
        }
        
        if (active-page == 6): CreateStandardInvoiceView {
            create-clicked(memo, amount) => {
                root.create-standard-invoice(memo, amount);
            }
        }
    }
    
    // Add the wallet unlock dialog
    wallet-dialog := WalletUnlockDialog {
        show: root.wallet-needs-unlock;
        
        unlock-wallet(password) => {
            root.unlock-wallet(password);
        }
        
        close => {
            root.close-wallet-dialog();
        }
    }
} 