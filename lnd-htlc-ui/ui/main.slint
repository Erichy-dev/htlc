import { Button, LineEdit, ScrollView, VerticalBox } from "std-widgets.slint";
import { Invoice, InvoiceItem } from "components/invoice.slint";
import { WalletUnlockDialog } from "components/wallet_dialog.slint";
import { ActionButton } from "components/action_button.slint";
import { ChannelsView } from "views/channels_view.slint";
import { CreateChannelView } from "views/channel_creation_view.slint";
import { PreimageView } from "views/preimage_view.slint";
import { CreateCustomInvoiceView, PayInvoiceView, ClaimInvoiceView, CreateStandardInvoiceView } from "views/invoice_views.slint";

export component MainWindow inherits Window {
    title: "Lightning Network Manager";
    min-width: 900px;
    min-height: 600px;
    background: #202020;

    // Main callbacks
    callback manage-channels();
    callback create-channel();
    callback generate-xh();
    callback create-custom-invoice(string, string, string); // preimage, amount, memo
    callback pay-custom-invoice(string); // bolt11
    callback claim-custom-invoice(string, string); // hash, preimage
    callback create-standard-invoice(string, int); // memo, amount
    callback check-node-status();
    callback start-node();
    callback unlock-wallet(string); // password
    callback close-wallet-dialog();

    // Special callback for updating preimage/hash display
    callback update-preimage-hash(string, string); // preimage, hash
    
    // Action page tracking
    property <int> active-page: 0; // 0 = manage channels, 1 = create channel, 2 = generate x/h, 3 = custom invoice, 4 = pay invoice, 5 = claim invoice, 6 = standard invoice
    
    in property <[Invoice]> invoices: [];
    in property <string> status-message;
    in property <bool> node-is-running: false;
    in property <string> node-sync-status: "Unknown";
    in property <bool> wallet-needs-unlock: false;
    property <bool> has-error: status-message != "" && (status-message == "Error" || status-message == "Error: ");
    

    
    // Local storage for preimage and hash
    property <string> current-preimage: "";
    property <string> current-hash: "";
    
    // Handle the update callback
    update-preimage-hash(preimage, hash) => {
        root.current-preimage = preimage;
        root.current-hash = hash;
    }

    HorizontalLayout {
        padding: 0px;
        spacing: 0px;

        // Sidebar
        Rectangle {
            width: 220px;
            background: #1a1a1a;
            
            VerticalBox {
                padding: 16px;
                spacing: 12px;
                
                Text {
                    text: "Lightning Network";
                    font-size: 18px;
                    font-weight: 700;
                    color: #e0e0e0;
                }
                
                // WALLET UNLOCK SECTION - Move this to the top for visibility
                if root.wallet-needs-unlock: Rectangle {
                    height: 140px;
                    background: #3a0000; // Deep red background
                    border-radius: 6px;
                    border-width: 2px;
                    border-color: #dc3545;
                    
                    VerticalLayout {
                        padding: 12px;
                        spacing: 10px;
                        
                        Text {
                            text: "⚠️ WALLET LOCKED";
                            font-weight: 700;
                            font-size: 16px;
                            color: #ff6b70;
                            horizontal-alignment: center;
                        }
                        
                        wallet-password := LineEdit {
                            placeholder-text: "Enter wallet password";
                            input-type: InputType.password;
                            height: 36px;
                        }
                        
                        TouchArea {
                            Rectangle {
                                height: 36px;
                                width: 100%;
                                background: #5294e2;
                                border-radius: 4px;
                                
                                Text {
                                    text: "UNLOCK WALLET";
                                    color: white;
                                    font-size: 14px;
                                    font-weight: 700;
                                    horizontal-alignment: center;
                                    vertical-alignment: center;
                                }
                            }
                            clicked => { root.unlock-wallet(wallet-password.text); }
                        }
                    }
                }
                
                // Node status indicator
                Rectangle {
                    height: 80px;
                    background: #252525;
                    border-radius: 4px;
                    
                    VerticalLayout {
                        padding: 10px;
                        spacing: 6px;
                        
                        HorizontalLayout {
                            spacing: 6px;
                            
                            Rectangle {
                                width: 12px;
                                height: 12px;
                                border-radius: 6px;
                                background: root.node-is-running ? #20c997 : #dc3545;
                            }
                            
                            Text {
                                text: root.node-is-running ? "Node Running" : "Node Offline";
                                color: root.node-is-running ? #e0e0e0 : #ffb0a3;
                                font-weight: 500;
                                vertical-alignment: center;
                            }
                        }
                        
                        Text {
                            text: "Sync: " + root.node-sync-status;
                            color: #bbbbbb;
                            font-size: 13px;
                        }
                        
                        HorizontalLayout {
                            spacing: 8px;
                            
                            if !root.node-is-running: TouchArea {
                                width: 100px;
                                Rectangle {
                                    width: 100%;
                                    height: 26px;
                                    border-radius: 4px;
                                    background: #20c997;
                                    
                                    Text {
                                        text: "Start Node";
                                        color: black;
                                        font-size: 12px;
                                        font-weight: 500;
                                        horizontal-alignment: center;
                                        vertical-alignment: center;
                                    }
                                }
                                clicked => { root.start-node(); }
                            }
                            
                            TouchArea {
                                width: 80px;
                                Rectangle {
                                    width: 100%;
                                    height: 26px;
                                    border-radius: 4px;
                                    background: #5294e2;
                                    
                                    Text {
                                        text: "Refresh";
                                        color: white;
                                        font-size: 12px;
                                        font-weight: 500;
                                        horizontal-alignment: center;
                                        vertical-alignment: center;
                                    }
                                }
                                clicked => { root.check-node-status(); }
                            }
                        }
                    }
                }
                
                Rectangle { height: 1px; background: #3a3a3a; }
                
                ActionButton {
                    text: "Manage Channels";
                    is-active: root.active-page == 0;
                    clicked => {
                        root.active-page = 0;
                        root.manage-channels();
                    }
                }
                
                ActionButton {
                    text: "Create New Channel";
                    is-active: root.active-page == 1;
                    clicked => {
                        root.active-page = 1;
                        root.create-channel();
                    }
                }
                
                ActionButton {
                    text: "Generate X/H";
                    is-active: root.active-page == 2;
                    clicked => {
                        root.active-page = 2;
                        root.generate-xh();
                    }
                }
                
                Rectangle { height: 1px; background: #3a3a3a; }
                
                Text {
                    text: "Invoices";
                    font-size: 16px;
                    font-weight: 700;
                    color: #e0e0e0;
                }
                
                ActionButton {
                    text: "Create Custom Invoice";
                    is-active: root.active-page == 3;
                    clicked => { root.active-page = 3; }
                }
                
                ActionButton {
                    text: "Pay Custom Invoice";
                    is-active: root.active-page == 4;
                    clicked => { root.active-page = 4; }
                }
                
                ActionButton {
                    text: "Claim Custom Invoice";
                    is-active: root.active-page == 5;
                    clicked => { root.active-page = 5; }
                }
                
                ActionButton {
                    text: "Create Standard Invoice";
                    is-active: root.active-page == 6;
                    clicked => { root.active-page = 6; }
                }
            }
        }
        
        // Main Content
        VerticalBox {
            padding: 16px;
            spacing: 16px;

            // Status Message
            if status-message != "": Rectangle {
                height: 48px;
                background: root.has-error ? #66382c : #2c5142;
                border-radius: 4px;

                HorizontalLayout {
                    padding: 12px;
                    spacing: 8px;
                    alignment: center;

                    Text {
                        text: status-message;
                        color: root.has-error ? #ffb0a3 : #a3ffb0;
                        font-weight: 500;
                        vertical-alignment: center;
                    }
                }
            }

            // Additional status info for wallet lock
            if root.wallet-needs-unlock: Rectangle {
                height: 48px;
                background: #66382c;
                border-radius: 4px;

                HorizontalLayout {
                    padding: 12px;
                    spacing: 8px;
                    alignment: center;

                    Text {
                        text: "Wallet is locked! Please unlock with your password from the sidebar.";
                        color: #ffb0a3;
                        font-weight: 600;
                        vertical-alignment: center;
                    }
                }
            }

            // Dynamic Main Content based on active-page
            if root.active-page == 0: ChannelsView {}
            
            if root.active-page == 1: CreateChannelView {
                create-channel(node-pubkey, amount) => {
                    // Forward to the main callbacks
                }
            }
            
            if root.active-page == 2: PreimageView {
                current-preimage: root.current-preimage;
                current-hash: root.current-hash;
                generate-clicked => { root.generate-xh(); }
            }
            
            if root.active-page == 3: CreateCustomInvoiceView {
                create-clicked(preimage, amount, memo) => { 
                    root.create-custom-invoice(preimage, amount, memo);
                }
            }
            
            if root.active-page == 4: PayInvoiceView {
                pay-clicked(bolt11) => {
                    root.pay-custom-invoice(bolt11);
                }
            }
            
            if root.active-page == 5: ClaimInvoiceView {
                claim-clicked(hash, preimage) => {
                    root.claim-custom-invoice(hash, preimage);
                }
            }
            
            if root.active-page == 6: CreateStandardInvoiceView {
                create-clicked(memo, amount) => {
                    root.create-standard-invoice(memo, amount);
                }
            }

            // Invoices List (shown on all pages)
            Rectangle {
                vertical-stretch: 1;
                border-radius: 8px;
                background: #2a2a2a;
                drop-shadow-color: #00000044;
                drop-shadow-offset-x: 0px;
                drop-shadow-offset-y: 2px;
                drop-shadow-blur: 4px;

                VerticalBox {
                    padding: 16px;

                    Text {
                        text: "Recent Invoices";
                        font-size: 20px;
                        font-weight: 600;
                        color: #e0e0e0;
                    }

                    ScrollView {
                        VerticalBox {
                            padding: 8px;
                            spacing: 12px;
                            for invoice in root.invoices: InvoiceItem {
                                invoice: invoice;
                                is-settled: invoice.state == "SETTLED";
                                settle-clicked => {
                                    root.claim-custom-invoice(invoice.hash, invoice.preimage);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    // Add the wallet unlock dialog
    wallet-dialog := WalletUnlockDialog {
        show: root.wallet-needs-unlock;
        
        unlock-wallet(password) => {
            root.unlock-wallet(password);
        }
        
        close => {
            root.close-wallet-dialog();
        }
    }
} 