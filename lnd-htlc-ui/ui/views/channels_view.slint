import { ScrollView } from "std-widgets.slint";

// Define our Active Channel structure
export struct Channel {
    channel_id: string,
    remote_pubkey: string,
    capacity: string,
    local_balance: string,
    remote_balance: string,
    active: bool
}

// Define our Pending Channel structure
export struct PendingChannel {
    remote_pubkey: string,
    channel_point: string, 
    capacity: string,
    local_balance: string,
    remote_balance: string, 
    status: string
}

export component ChannelsView inherits Rectangle {
    in property <[Channel]> channels: [];
    in property <[PendingChannel]> pending_channels: [];
    
    background: transparent;
    vertical-stretch: 1;
    horizontal-stretch: 1;
    
    VerticalLayout {
        spacing: 16px;
        padding: 10px;
        
        // Header
        HorizontalLayout {
            spacing: 12px;
            alignment: space-between;
            
            Text {
                text: "Manage Channels";
                font-size: 24px;
                font-weight: 600;
                color: #e0e0e0;
            }
        }
        
        // Active Channels list
        Text {
            text: "Active Channels";
            font-size: 18px;
            font-weight: 500;
            color: #c0c0c0;
        }
        if root.channels.length == 0: Rectangle {
            height: 60px;
            Text {
                text: "No active channels found.";
                color: #bbbbbb;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
        if root.channels.length > 0: Rectangle {
            vertical-stretch: 1;
            horizontal-stretch: 1;
            background: #2a2a2a;
            border-radius: 8px;
            
            ScrollView {
                vertical-stretch: 1;
                horizontal-stretch: 1;
                VerticalLayout {
                    padding: 16px;
                    spacing: 12px;
                    
                    for channel[i] in root.channels: Rectangle {
                        height: 120px;
                        background: channel.active ? #2d3b2d : #3b2d2d; // Greenish for active, reddish for inactive (though they should all be active here)
                        border-radius: 8px;
                        
                        VerticalLayout {
                            padding: 12px;
                            spacing: 8px;
                            
                            HorizontalLayout {
                                spacing: 8px;
                                Text {
                                    text: "ID: " + channel.channel_id;
                                    color: #e0e0e0;
                                    font-weight: 500;
                                }
                                Rectangle {
                                    width: 10px;
                                    height: 10px;
                                    border-radius: 5px;
                                    background: channel.active ? #20c997 : #dc3545;
                                }
                                Text {
                                    text: channel.active ? "Active" : "Inactive";
                                    color: channel.active ? #a3ffb0 : #ffb0a3;
                                }
                            }
                            Text {
                                text: "Peer: " + channel.remote_pubkey;
                                color: #e0e0e0;
                                font-size: 14px;
                                overflow: elide;
                            }
                            HorizontalLayout {
                                spacing: 16px;
                                Text {
                                    text: "Cap: " + channel.capacity + " sats";
                                    color: #bbbbbb;
                                }
                                Text {
                                    text: "Local: " + channel.local_balance + " sats";
                                    color: #a3ffb0;
                                }
                                Text {
                                    text: "Remote: " + channel.remote_balance + " sats";
                                    color: #ffb0a3;
                                }
                            }
                        }
                    }
                }
            }
        }

        // Pending Channels list
        Text {
            text: "Pending Channels";
            font-size: 18px;
            font-weight: 500;
            color: #c0c0c0;
            padding-top: 10px; 
        }
        if root.pending_channels.length == 0: Rectangle {
            height: 60px;
            Text {
                text: "No pending channels.";
                color: #bbbbbb;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
        if root.pending_channels.length > 0: Rectangle {
            vertical-stretch: 1;
            horizontal-stretch: 1;
            background: #2a2a2a;
            border-radius: 8px;
            
            ScrollView {
                vertical-stretch: 1;
                horizontal-stretch: 1;
                VerticalLayout {
                    padding: 16px;
                    spacing: 12px;
                    
                    for p_channel[i] in root.pending_channels: Rectangle {
                        height: 100px; // Slightly smaller for pending
                        background: #333333; // Neutral background
                        border-radius: 4px;
                        
                        VerticalLayout {
                            padding: 12px;
                            spacing: 8px;
                            
                            HorizontalLayout {
                                spacing: 8px;
                                Text {
                                    text: "Peer: " + p_channel.remote_pubkey;
                                    color: #e0e0e0;
                                    font-weight: 500;
                                }
                                Text {
                                    text: "Status: " + p_channel.status;
                                    color: #f0ad4e; // Orange for pending status
                                }
                            }
                             Text {
                                text: "Channel Point: " + p_channel.channel_point;
                                color: #e0e0e0;
                                font-size: 13px;
                                overflow: elide;
                            }
                            HorizontalLayout {
                                spacing: 16px;
                                Text {
                                    text: "Cap: " + p_channel.capacity + " sats";
                                    color: #bbbbbb;
                                }
                                Text {
                                    text: "Local: " + p_channel.local_balance + " sats";
                                    color: #a3ffb0;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
} 